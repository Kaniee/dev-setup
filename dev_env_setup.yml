---
- name: Set up a basic development environment
  hosts: localhost
  connection: local
  gather_facts: true
  vars:
    the_user: "{{ ansible_user_id }}"
    dev_packages_common:
      - git
      - curl
      - htop
      - fish
      - gh
      - pipx
      - unzip
      - jq
      - bat
      - ripgrep
      - fzf
      - git-delta
      - maven
    dev_packages_linux:
      - python3
      - python3-pip
      - python-is-python3
      - openjdk-17-jre
      - openjdk-17-jdk
      - openjdk-17-demo
      - openjdk-17-doc
      - openjdk-17-jre-headless
      - openjdk-17-source
      - docker.io
      - fd-find
      - dotnet-sdk-8.0
      - dotnet-sdk-9.0
    dev_packages_mac:
      - python
      - openjdk@17
      - docker # Just docker CLI, no runtime
      - colima # Alternative to Docker Desktop due to licensing issues
      - fd
      - dotnet-sdk@8
      - dotnet-sdk@9
      - fnm
      - font-fira-code-nerd-font

  tasks:
    - name: Ensure Homebrew is installed (macOS only)
      when: ansible_os_family == "Darwin"
      shell: |
        which brew || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      args:
        executable: /bin/bash

    - name: Add dotnet repository (Debian only)
      when: ansible_os_family == "Debian"
      become: true
      apt_repository:
        repo: ppa:dotnet/backports

    - name: Install packages on Debian
      when: ansible_os_family == "Debian"
      become: true
      package:
        name: "{{ dev_packages_common + dev_packages_linux }}"
        state: present

    - name: Install packages on macOS
      when: ansible_os_family == "Darwin"
      homebrew:
        name: "{{ dev_packages_common + dev_packages_mac }}"
        state: present

    - name: Install fnm (Debian only)
      when: ansible_os_family == "Debian"
      shell: curl -fsSL https://fnm.vercel.app/install | bash
      args:
        creates: ~/.local/share/fnm/fnm

    - name: Add user to docker group (Debian only)
      when: ansible_os_family == "Debian"
      become: true
      user:
        name: "{{ the_user }}"
        groups: docker
        append: yes

    - name: Start colima (macOS only)
      when: ansible_os_family == "Darwin"
      community.general.homebrew_services:
        name: colima
        state: present

    - name: Set up bat symlink (Debian only)
      when: ansible_os_family == "Debian"
      shell: ln -s /usr/bin/batcat ~/.local/bin/bat
      args:
        chdir: ~/.local/bin
        creates: ~/.local/bin/bat

    - name: Set up fd symlink (Debian only)
      when: ansible_os_family == "Debian"
      shell: ln -s /usr/bin/fdfind ~/.local/bin/fd
      args:
        chdir: ~/.local/bin
        creates: ~/.local/bin/fd

    - name: Ensure ~/.local/bin in path (Debian only)
      when: ansible_os_family == "Debian"
      lineinfile:
        path: ~/.bashrc
        line: export PATH="$PATH:{{ ansible_env.HOME }}/.local/bin"

    - name: Set fish as default shell
      become: true
      user:
        name: "{{ the_user }}"
        shell: "{{ lookup('pipe', 'which fish') }}"

    - name: Intialize fish config
      shell: fish -c 'echo "fish is installed"'
      args:
        executable: fish
        creates: ~/.config/fish/config.fish

    - name: Ensure ~/.local/bin in fish path (Debian only)
      when: ansible_os_family == "Debian"
      lineinfile:
        path: ~/.config/fish/config.fish
        line: set PATH $PATH {{ ansible_env.HOME }}/.local/bin

    - name: Add brew config to fish
      when: ansible_os_family == "Darwin"
      lineinfile:
        create: true
        path: ~/.config/fish/conf.d/brew.fish
        line: /opt/homebrew/bin/brew shellenv | source

    - name: Ensure pipx is initialized
      shell: |
        pipx ensurepath

    - name: Install poetry
      community.general.pipx:
        executable: pipx
        name: poetry

    - name: Install uv
      community.general.pipx:
        executable: pipx
        name: uv

    - name: Add poetry completions in fish
      shell: poetry completions fish > poetry.fish
      args:
        chdir: ~/.config/fish/completions
        creates: poetry.fish

    - name: Add docker completions in fish
      shell: docker completion fish > docker.fish
      args:
        chdir: ~/.config/fish/completions
        creates: docker.fish

    - name: Add docker completions in fish
      shell: echo 'uv generate-shell-completion fish | source' > uv.fish
      args:
        chdir: ~/.config/fish/completions
        creates: uv.fish

    - name: Install fisher
      shell: curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher
      args:
        executable: fish
        creates: ~/.config/fish/functions/fisher.fish

    - name: Get fisher plugins
      shell: fisher list
      args:
        executable: fish
      register: fisher_plugins
      changed_when: false

    - name: Install bobthefish
      shell: fisher install oh-my-fish/theme-bobthefish
      args:
        executable: fish
      when: fisher_plugins.stdout.find('bobthefish') == -1

    - name: Fish config
      blockinfile:
        path: ~/.config/fish/config.fish
        block: |
          set -g theme_nerd_fonts yes
          set -g theme_date_timezone Europe/Berlin

          abbr gf "git fetch"
          abbr gc "git commit"
          abbr ga "git add -p"
          abbr gp "git push"
          abbr gs "git switch"
          abbr gl "git pull"
          abbr untar "tar -xvf"

          function last_history_item
              echo $history[1]
          end
          abbr -a !! --position anywhere --function last_history_item

    - name: Add fnm completions
      shell: fnm completions --shell fish > fnm.fish
      args:
        chdir: ~/.config/fish/completions
        creates: fnm.fish

    - name: Add fnm cd-completions
      lineinfile:
        create: true
        path: ~/.config/fish/conf.d/fnm.fish
        line: fnm env --use-on-cd --shell fish | source

    - name: Install node and npm LTS
      shell: fnm install --lts
      args:
        creates: ~/.local/share/fnm/node-versions/

    - name: Create folder structure in home directory
      file:
        path: "{{ ansible_env.HOME }}/git/{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - personal
        - work
        - oss

    - name: Git config includeIf.work
      community.general.git_config:
        scope: global
        name: includeIf.gitdir:~/git/work/.path
        value: ~/git/work/.gitconfig

    - name: Git config includeIf.personal
      community.general.git_config:
        scope: global
        name: includeIf.gitdir:~/git/personal/.path
        value: ~/git/personal/.gitconfig

    - name: Git config includeIf.oss
      community.general.git_config:
        scope: global
        name: includeIf.gitdir:~/git/oss/.path
        value: ~/git/oss/.gitconfig

    - name: Git config core.editor
      community.general.git_config:
        scope: global
        name: core.editor
        value: code --wait

    - name: Git config core.pager
      community.general.git_config:
        scope: global
        name: core.pager
        value: delta

    - name: Git config interactive.diffFilter
      community.general.git_config:
        scope: global
        name: interactive.diffFilter
        value: delta --color-only

    - name: Git config delta.navigate
      community.general.git_config:
        scope: global
        name: delta.navigate
        value: true

    - name: Git config delta.dark
      community.general.git_config:
        scope: global
        name: delta.dark
        value: true

    - name: Git config merge.conflictstyle
      community.general.git_config:
        scope: global
        name: merge.conflictstyle
        value: zdiff3

    - name: Git config push.autoSetupRemote
      community.general.git_config:
        scope: global
        name: push.autoSetupRemote
        value: true

    - name: Git config alias.lg
      community.general.git_config:
        scope: global
        name: alias.lg
        value: log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'

    - name: Git config pull.rebase
      community.general.git_config:
        scope: global
        name: pull.rebase
        value: true

    - name: Git config advice.skippedCherryPicks
      community.general.git_config:
        scope: global
        name: advice.skippedCherryPicks
        value: false

    - name: Git config init.defaultBranch
      community.general.git_config:
        scope: global
        name: init.defaultBranch
        value: main

    - name: Git config push.useForceIfIncludes
      community.general.git_config:
        scope: global
        name: push.useForceIfIncludes
        value: true

    - name: Git config gpg.format (work)
      community.general.git_config:
        scope: file
        file: ~/git/work/.gitconfig
        name: gpg.format
        value: ssh

    - name: Git config commit.gpgsign (work)
      community.general.git_config:
        scope: file
        file: ~/git/work/.gitconfig
        name: commit.gpgsign
        value: true
